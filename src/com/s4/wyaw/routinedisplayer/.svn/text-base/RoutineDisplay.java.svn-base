//
// file: RoutineDisplay.java
// owner: gsn
//
// TODO: Use themes for look http://developer.android.com/guide/topics/ui/themes.html,
//       http://developer.android.com/resources/articles/timed-ui-updates.html
//
package com.s4.wyaw.routinedisplayer;

import java.util.HashMap;
import java.util.Iterator;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.flurry.android.FlurryAgent;
import com.s4.wyaw.CompletedView;
import com.s4.wyaw.ExerciseExplanation;
import com.s4.wyaw.R;
import com.s4.wyaw.exercise.Exercise;
import com.s4.wyaw.exercise.Routine;

// Class: RoutineDisplay. 
// Description: Used to display an entire workout routine. 
// A clock counts down the seconds of a routine while we display a picture and text.
// Also. Sound is displayed for the start of each new exercise.
//
//
/**
 * @author gregni2
 *
 */
public class RoutineDisplay extends Activity implements OnClickListener {
	
	//
	// Routine information. Mostly, what is the next exercise to perform.
	//
	static public Exercise 	    		curExercise_ = null;
	static public Routine 				routine_ = null;
	static public Iterator<Exercise>  	exerciseIter_ = null;
    private String 						nextExerciseName_ = "";
    private String 						nextExerciseDesc_ = "";
    private int 						nextExercisePict_ = 0;

	//
	// Clock information.
	//
	private int 						countDown_ = 0;
    private int							numExercises_ = 0;
    private int 						exerciseCount_ = 0;
    static private	int 				pictureLoopCount = 0;
    
	//
	// View info/state.
	//
	private TextView 					clock_ = null;
	private TextView					clockInfo_ = null;
	private TextView					moveInfo_ = null;
	private Button 						pauseButton_ = null;
	private Button 						skipButton_ = null;
	private Button 			            prevButton_ = null;
   	static public boolean				statePaused_ = false;
   	
   	//
   	// Sound.
   	//
   	private RoutineSounds routineSounds_ = null;
   	
   	//
   	// We want the phone on during the hold routine.
   	//
   	PowerManager.WakeLock wl_;
   	PowerManager pm_;
   	
	//
	// Threads
	//
	private SoundLoaderThread soundRunnable_ = null; // for delayed sound loading.
   	private UpdateClockThread timerRunnable_ = null; // for updating clock and picture information.
   	private Thread soundThread_ = null;
   	private Thread timerThreadHolder_ = null;
   	
   	//
   	// Display the routine image and clock. Setup threads.
   	//
   	@Override
    public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
    	Log.d("RoutineDisplay::onCreate", "Enter");
  	
    	curExercise_ = null;		
		if (RoutineDisplay.routine_ == null) {
			FlurryAgent.onEvent("ERROR: routine_ == null ");
			return;
		}
		exerciseIter_= routine_.getExerciseIterator();
		
		//
	    // Routine display layout.
        //
    	setContentView(R.layout.routinedisplayadvance);
    	setVolumeControlStream(AudioManager.STREAM_MUSIC);

    	//
    	// Voices: Setup the spinner with the choices of voice and beep.
    	//
    	Spinner s = (Spinner) findViewById(R.id.voice_dropdown);
    	ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource( this, R.array.voice_choices, 
    																		  R.layout.my_spinner_text);
    	s.setAdapter(adapter);
    	s.setOnItemSelectedListener(new VoiceSelectedListener());
    	 
        //
        // Setup the pause button.
        //
        pauseButton_ = (Button) findViewById(R.id.pause_explain_button_text);
        pauseButton_.setOnClickListener(this);
        pauseButton_.setVisibility(Button.VISIBLE);
        
        //
        // Setup the skip button.
        //
        skipButton_ = (Button) findViewById(R.id.right_arrow_button);
        skipButton_.setOnClickListener(this);
        skipButton_.setVisibility(View.INVISIBLE);
         
        //
        // Setup the skip button.
        //
        prevButton_ = (Button) findViewById(R.id.left_arrow_button);
        prevButton_.setOnClickListener(this);
        prevButton_.setVisibility(View.INVISIBLE);
        //
        // Get voice saved preference.
        //
        final int DEFAULT_VALUE = 0;
		String preferenceName = "voiceType";
	    SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(this);
	    int voiceSelected = settings.getInt(preferenceName, DEFAULT_VALUE);
	    s.setSelection(voiceSelected);
    	
	    //
	    // Setup the sounds.
	    //
	    routineSounds_ = new RoutineSounds(routine_, getBaseContext(), voiceSelected);
	    
	    //
        // Setup the display.
        //
        setupStartOfRoutineDisplay();
        
        //
        // Setup the clock view. Give it an embedded font.
        //
        //Typeface tf = Typeface.createFromAsset(getAssets(), "fonts/LCD-BOLD.TTF");
        Typeface tf = Typeface.createFromAsset(getAssets(), "fonts/DIGITALDREAM.ttf");
        clock_.setTypeface(tf);
        
        TextView title = (TextView) getWindow().findViewById(android.R.id.title);  
        title.setText("Title");
        
        //
        // Routine introduction screen.
        //
        setupRoutineStartScreen();
        
        // THREAD AND TIMER SETUP.
        //
        // Start Timer threads.
        //
        timerRunnable_  = new UpdateClockThread(this);
        timerThreadHolder_= new Thread(timerRunnable_);
        timerThreadHolder_.start();
      
        //
        // Start sound thread. We put this in a thread so that we don't load all the sounds 
        // at once. Otherwise there is a lag loading the view.
        //
 	   	soundRunnable_ = new SoundLoaderThread(this);
        soundThread_ = new Thread(soundRunnable_);
        soundThread_.start();
        
 		Log.d("RoutineDisplay::onCreate", "Exit");
   	}
	   	
	@Override
	protected void onPause() {
		super.onPause();
		statePaused_ = true;
	}
	

	@Override
	protected void onStart() {
		super.onStart();
		FlurryAgent.onStartSession(this, "WC41REE2S5H3HCRR3I4F");
		statePaused_ = false;

		pm_ = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wl_ = pm_.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "Routine Displayer");
		wl_.acquire();
		
		routineSounds_.loadFinishSound();
			
		
		// Send the start event.
	    HashMap<String, String> parameters = new HashMap<String, String>();
	    parameters.put("Routine", RoutineDisplay.routine_.getName());
		FlurryAgent.onEvent("Begin Routine ", parameters);
	} 
	
	@Override
	protected void onStop() {
		super.onStop();

		// Send the stop event.
		if ((RoutineDisplay.routine_.getNumberExercises() - numExercises_) > 0) {
			HashMap<String, Integer> parameters = new HashMap<String, Integer>();
			parameters.put("exercise not done", (RoutineDisplay.routine_.getNumberExercises() - numExercises_));
			FlurryAgent.onEvent("Stop Not finished" + RoutineDisplay.routine_.getName(), parameters);
		}
		else {
			HashMap<String, String> parameters = new HashMap<String, String>();
			parameters.put("Routine Finished", RoutineDisplay.routine_.getName());
			FlurryAgent.onEvent("Stop finished", parameters);
		}
			
		FlurryAgent.onEndSession(this);
		wl_.release();
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();

		//
		// Stop the threads.
		//
		soundThread_.interrupt();
		timerThreadHolder_.interrupt(); 
		
		//
		// Reset the rested state.
		//
		Iterator<Exercise> iter = RoutineDisplay.routine_.getExerciseIterator();
		while (iter.hasNext()) {
			Exercise exercise = iter.next();
			exercise.setRested(false);
			exercise.setPerformed(false);
		}
		soundThread_ = null;
		timerThreadHolder_ = null;
		soundRunnable_ = null;
		timerRunnable_ = null;
		curExercise_ = null;
		
		//
		// Save the voice type.
		//
		String preferenceName = "voiceType";
	    SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(this);
	    SharedPreferences.Editor editor = settings.edit();
	    int voiceSelected = routineSounds_.getVoiceSelected();
	    editor.putInt(preferenceName, voiceSelected);
	    editor.commit();
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		statePaused_ = false;
	}
	
	//
	// Voice option selector notifications.
	//
	public class VoiceSelectedListener implements OnItemSelectedListener {

	    public void onItemSelected(AdapterView<?> parent,
	        View view, int pos, long id) {
	    	Log.d("VoiceSelectedListener::onItemSelected", "Enter");
			routineSounds_.setVoiceSelected(pos, curExercise_);
	    	Log.d("VoiceSelectedListener::onItemSelected", "Exit");
	    }

		@Override
		public void onNothingSelected(AdapterView<?> arg0) {
		}
   }
	
	//
	// Setup the display before we begin the routine. For instance, get the first exercise.
	//
	void setupStartOfRoutineDisplay() 
	{
		Log.d("RoutineDisplay::setupStartOfRoutine", "Enter");
		
		
		//
		// Exercise setup. 
		//
		Iterator<Exercise> iter = routine_.getExerciseIterator();
		curExercise_ = iter.next();
		numExercises_ = routine_.getNumberExercises();
		
		//
		// Load in the sounds.
		//
		routineSounds_.loadExerciseSounds(curExercise_);   	// GSN. I think we can remove this and still sound good in the beginning.	
       
		//
		// Get the name of the routine.
		//
		TextView titleView = (TextView)findViewById(R.id.exercise_title);
		titleView.setText("Prepare for " + routine_.getName() + " routine");
		
		//
		// Describe the routines.
		//
		TextView exerciseDescription = (TextView)findViewById(R.id.text_description);
		exerciseDescription.setText(routine_.getDescription());
		
		//
		// No clock yet.
		//
		clock_ = (TextView)findViewById(R.id.clockText);
        clock_.setText("");
        clockInfo_ = (TextView)findViewById(R.id.statusText);
        moveInfo_ = (TextView)findViewById(R.id.exercise_number);
     	++exerciseCount_;
       	moveInfo_.setText("Exercise " + exerciseCount_ + " of " + numExercises_);
       	
		//
		// Picture it.
		//
       	ImageView imageView = (ImageView)findViewById(R.id.exercise_piture);
		if (curExercise_.pictureList_ == null) {
			imageView.setImageResource(curExercise_.getPicture());
       	}
		else {
			Object[] pictureArray = curExercise_.pictureList_.toArray();
			imageView.setImageResource((Integer)pictureArray[0]);
	    }
		exerciseDescription.invalidate();
   
		Log.d("RoutineDisplay::setupStartOfRoutine", "Exit");	
	}
	
	//
	// The setup screen to tell a little bit about the routine and 
	// describe if we should do a workout before.
	//
	
	void setupRoutineStartScreen() {
		
		//
		// Status text.
		//
	    TextView status = (TextView)getWindow().findViewById(R.id.statusText);
	    status.setText(routine_.getName());
	     
	    //
	    // Clock text.
	    //
	    TextView clockText = (TextView)getWindow().findViewById(R.id.clockText);
	    clockText.setText("");
	     
	    //
	    // Warn the user about no warmup.
	    //
	    if (!routine_.hasWarmup) {
	    	TextView exerciseTitle = (TextView)getWindow().findViewById(R.id.exercise_title);
	    	exerciseTitle.setText("Routine has no warmup. Try the \"5 Minute Warmup\" for a warmup.");
	    }
	    
	    
	    //
	    // The other information is not used for this routine.
	    TextView exerciseNum = (TextView)getWindow().findViewById(R.id.exercise_number);
	    exerciseNum.setText("This routine has " + routine_.getNumberExercises() + " exercises");
	    exerciseNum.setText("");
	    TextView exerciseRep = (TextView)getWindow().findViewById(R.id.repText);
	    exerciseRep.setText("");
	  
	    //
	    // Description of routine.
	    //
	    TextView textDescription = (TextView)getWindow().findViewById(R.id.text_description);
	    textDescription.setText(routine_.getDescription());
	     
	}
	
	public void playPreparingSound()
	{
		routineSounds_.playPreparingSound(curExercise_);
	}
	
	//    
    // Implement the OnClickListener callback
    //
    public void onClick(View v) 
    {    
    	Log.d("RoutineDisplay::onClick", "Enter");
    	
    	//
    	// Pause button.
    	//
    	if (v.getId() == pauseButton_.getId() && (curExercise_ != null)) 
    	{ 
    		 //
   		 	 // Pause.
   		 	 //
   		 	 statePaused_ = true;
   	  	
    		 //
    		 // Setup for calling exercise explainer.
    		 //
             Intent intent = new Intent (this, ExerciseExplanation.class); 
             
             if (!curExercise_.isRested()) 
             {		 
                 intent.putExtra("name", curExercise_.getName());
                 intent.putExtra("description", curExercise_.getDescription());
                 intent.putExtra("picture", curExercise_.getPicture());
                 if (curExercise_.pictureList_ != null) {
	                 intent.putExtra("numpicts", curExercise_.pictureList_.size());
	                 if (curExercise_.pictureList_.size() > 0) {
	                	 int i = 0;
	                	 Iterator<Integer> iter = curExercise_.pictureList_.iterator();
	                	 while (iter.hasNext()) {
	                		 Integer value = iter.next();
	                		 String name = "picture"+i++;
	                		 Log.d("Pause and explain values" , " name = " + name + " value = " + value);
	                		 intent.putExtra(name, value);
	                	 }
	                 }
                 }
             }
             else if (nextExerciseName_ != null)
             {                 
                 intent.putExtra("name", nextExerciseName_);
                 intent.putExtra("description", nextExerciseDesc_);
                 intent.putExtra("picture", nextExercisePict_);
             }
    		 
    		 //
    		 // Start new intent.
    		 //
    		 startActivity(intent);
    	}
    	
    	else if (v.getId() == skipButton_.getId()) 
    	{ 
    		skipExercise();
    	}
    	else if (v.getId() == prevButton_.getId()) {
    		backupExercise();
    	}
    	
    	Log.d("RoutineDisplay::onClick", "Exit");
    }
    
    //
    // We're done. Move to the completed view.
    //
    protected synchronized void routineCompleted()
    {
     	Log.d("RoutineDisplay::routineCompleted", "Enter");		
     	FlurryAgent.onEvent("Completed = " + RoutineDisplay.routine_.getName());
     	
        //
        // Play finished sound.
        //
        routineSounds_.playFinished();

     	//
		// New intent.
		//
        Intent intent = new Intent(this, CompletedView.class);
        
        // CompletedView needs to know which routine was completed
        Bundle bundle = new Bundle();
        bundle.putString("name", routine_.getName());
        bundle.putString("level", routine_.getLevel());
        intent.putExtras(bundle);
        
        startActivity(intent);
        
        //
        // Done.
        //
        finish();
   
        Log.d("RoutineDisplay::routineCompleted", "Exit");
    }
    
    //
    // Thread work. 
    //
    
    //
    // Handle messages coming in. Used to update the display for the clock and picture.
    //
    public static final int MSG_FIRST_UPDATE = 0;
    public static final int MSG_UPDATE = 1;
    public static final int MSG_LOAD_SOUND = 2;
        
    //
    // Handle the messages: UPDATE (DISPLAY) and LOAD SOUND. 
    //
    private Handler handler_ = new Handler() {
        @Override
        public void handleMessage(Message msg) {
        	Log.d("handleMessage", "Enter");
            
        	//
        	// Update the views pictures.
        	//
        	if (MSG_UPDATE == msg.arg1) {
        		updateDisplay();
        	}
        	else if (MSG_FIRST_UPDATE == msg.arg1) {
        		playPreparingSound();
        	}
        	
        	//
        	// Load the next sound.
        	//
        	else if (MSG_LOAD_SOUND == msg.arg1) {
        		routineSounds_.addNextRoutineSound();
        	}
        	Log.d("handleMessage", "Exit");
        }
    };
    
    //
    // Get the next handler.
    //
    Handler getHandler() {
    	return handler_;
    }

    //
    // Change the images, text, sound, and clock.
    //
    protected synchronized void updateDisplay()
    {
    	Log.d("updateDisplay", "Updating for count = " + countDown_);

    	//
    	// If we are paused. Don't keep counting down.
    	//
    	if (statePaused_) {
    		Log.d("updateDisplay", "Returning. Paused state");
    		return;
    	}
    	
    	//
    	// Setup the skip and previous buttons.
    	//
    	skipButton_.setVisibility(View.VISIBLE);
    	skipButton_.refreshDrawableState();
    	if (exerciseCount_ > 1) {
			prevButton_.setVisibility(View.VISIBLE);
			prevButton_.refreshDrawableState();
		}
		else {
			 prevButton_.setVisibility(View.INVISIBLE);
			 prevButton_.refreshDrawableState();			
		}
    	
    	//
    	// Otherwise, count down decreases.
    	//
    	countDown_--;
    	
    	if (!curExercise_.isRested()) {
    		updateFlipPicture();
    	}
    	
    	//
    	// Sanity check.
    	//
    	if ( (exerciseIter_ == null ) || (curExercise_ == null) || (clock_ ==  null) || (clockInfo_ == null) ) {
    		Log.e("updateDisplay", "Return. Not setup exercise routine in thread." + exerciseIter_ + " " + curExercise_ + " " + clock_);
    		return;
    	}
     	
   	 	//
   	 	// If there are no exercises left and we've counted down and rested. 
   	 	// Then we're done.
   	 	//
   		if (!exerciseIter_.hasNext() && countDown_ <= 0 && curExercise_.isRested()) {
   			routineCompleted();
   		}	

   		//
   	 	// 1) Clock still counting down. Change clock and return.
   		//
   		// Updates clock with new look.
   	 	//   		
   		if ( countDown_ > 0 ) {
   			updateCountdownClock();
   			return;
   	 	}
   		
   		//
   		// 2) Clock has hit 0. A change must occur.
   		//
   	 	// If we've performed a current exercise but not rested.
   	 	//
   	 	if ((curExercise_ != null) && curExercise_.isPerformed() && !curExercise_.isRested()) {
   	 		//
   	 		// Setup the clock.
   	 		//
   	 		Log.d("updateDisplay", "Getting next exercise for rest time " + curExercise_.getName());
   	 		countDown_ = curExercise_.getRestTime();
   	 	    clockInfo_.setText("Rest");
   	   		updateClockInView();
   	 	
   	 		//
   	 		// Exercise description is empty. And set that we've rested.
   	 		//
   	 		final TextView exerciseDescription = (TextView)findViewById(R.id.text_description);
   	 		exerciseDescription.setText("");
   	 		curExercise_.setRested(true);
   	 		
   	 		//
   	 		// Get the next exercise sound.
   			//
   	 		Iterator<Exercise> tmpExerciseIter = RoutineDisplay.routine_.getExerciseIterator();
   			while (tmpExerciseIter.hasNext() && (tmpExerciseIter.next() != curExercise_ )) {
   			};
   			
   			if (tmpExerciseIter.hasNext()) {
   				Exercise tmpExercise = tmpExerciseIter.next();
   				routineSounds_.playPreparingSound(tmpExercise);
   		
   				// Describe it.
   	    		//
   	    		TextView tmpExerciseDescription = (TextView)findViewById(R.id.text_description);
   	    		tmpExerciseDescription.setText(tmpExercise.getShortDescription_());
   	        	TextView titleView = (TextView)findViewById(R.id.exercise_title);
   	        	titleView.setText(tmpExercise.getName());
   	        	++exerciseCount_;
   	        	moveInfo_.setText("Exercise " + exerciseCount_ + " of " + numExercises_);

   	        	//
   	        	// Picture it.
   	        	//
   	    //    	if (tmpExercise.pictureList_ == null) {
	   	    //    	ImageView imageView = (ImageView)findViewById(R.id.exercise_piture);
	   	  //      	imageView.setImageResource(tmpExercise.getPicture());
   	        	//}
   	        	
   	        	pictureLoopCount = 0;
   	        	nextExerciseName_ = tmpExercise.getName();
   	        	nextExerciseDesc_ = tmpExercise.getShortDescription_();
   	        	nextExercisePict_ = tmpExercise.getPicture();
   				
   	        	//
   	        	// Redraw the description.
   	        	//
   	        	exerciseDescription.invalidate();
   	        	moveInfo_.invalidate();
   			}
   	 	}
   	 	//
   	 	// If we have another exercise. Grab it and setup all the graphics, sound, and text.
   	 	//
   	 	else if ( exerciseIter_.hasNext() ) {
		
   	 		//
    		// Get next and update display.
    		//
          	updateExercisePictureAndDescription(exerciseIter_.next());
       	 	Log.d("updateDisplay", "Getting next exercise for active time " + curExercise_.getName());
        	
    		//
        	// Setup the clock.
        	//
       		countDown_ = curExercise_.getTimeActive();
        	clockInfo_.setText("Count Down");
      	   	updateClockInView();
    	 	
        	//
        	// Play the sound.
        	//
        	routineSounds_.playSound(curExercise_);
            
        	//
           	// Marked as performed.
           	//
        	curExercise_.setPerformed(true);
    	}
    
   		Log.d("updateDisplay", "returning");
    }
    
    
    private void skipExercise() {
    	if (RoutineDisplay.routine_ != null) {
			// Send the stop event.
			HashMap<String, String> parameters = new HashMap<String, String>();
			parameters.put("Exercise skipped", nextExerciseName_);	
			FlurryAgent.onEvent("Skip Routine " + RoutineDisplay.routine_.getName(), parameters );
		}
    	
    	//
    	// Move to the next routine by setting count to 0 and pretend we've rested.
    	//
    	curExercise_.setRested(true);
    	curExercise_.setPerformed(true);
    	exerciseCount_++;
		countDown_ = 0;	
    }
    
    
    private void backupExercise() {
    	FlurryAgent.onEvent("Repeat Routine " + RoutineDisplay.routine_.getName() );
	    
    	//
    	// We are just starting the exercise. The user probably wants to go back
    	// to the previous exercise.
    	if (exerciseCount_ > 1)  {
    		//
    		// Reset the perform and decrease the exercise count.
    		//
    		curExercise_.setRested(false);
        	curExercise_.setPerformed(false);
        	exerciseCount_--;
        	
    		
    		//
    		// Iterate through, resetting performs and rests.
    		//
    		exerciseIter_= routine_.getExerciseIterator();
    		int tmpExerciseCount = 0;
    		while (exerciseIter_.hasNext() &&  (exerciseCount_ > tmpExerciseCount)  ) {
    			curExercise_ = exerciseIter_.next();
    			curExercise_.setRested(false);
    	    	curExercise_.setPerformed(false);
    		    tmpExerciseCount++;
    		}
    		
    		//
    		// We have now performed this.
    		//
    		curExercise_.setPerformed(true);
    		
    		//
    		// Prepare for count down.
    		//
    		countDown_ = curExercise_.getTimeActive();
    		updateExercisePictureAndDescription(curExercise_);
          	updateClockInView();
    	}
    	
    }
    
    
    //
    // Screen update utilities.
    //
    
    private void updateExercisePictureAndDescription(Exercise newExercise) {
		curExercise_ = newExercise;
		
    	//
		// Describe it.
		//
		TextView exerciseDescription = (TextView)findViewById(R.id.text_description);
    	exerciseDescription.setText(curExercise_.getShortDescription_());
    	TextView titleView = (TextView)findViewById(R.id.exercise_title);
    	titleView.setText(curExercise_.getName());
    	exerciseDescription.invalidate();
    	
    	//
    	// Picture it.
    	//
    	ImageView imageView = (ImageView)findViewById(R.id.exercise_piture);
    	imageView.setImageResource(curExercise_.getPicture());
   
    	//
    	// Set goals.
    	//
        TextView exerciseRep = (TextView)getWindow().findViewById(R.id.repText);
        if (curExercise_.goal_ != null) {
        	exerciseRep.setText(curExercise_.goal_);
        	exerciseRep.invalidate();
        }
   
    	
    	//
    	// Exercise number.
    	//
    	moveInfo_.setText("Exercise " + exerciseCount_ + " of " + numExercises_);

    }
   
    
    /**
     * For a given number of seconds, we change the picture of the current exercise. This lets us flip through
     * a series of pictures for one exercise.
     */
    private void updateFlipPicture() {
    	// How often do we flip?
    	int changeSecondsAmount = 2;
    	
    	//
    	// For each number of seconds, change the picture.
    	//
    	if ( ( ( countDown_ % changeSecondsAmount ) == 0) &&  (curExercise_.pictureList_ != null) ) {
	    		ImageView imageView = (ImageView)findViewById(R.id.exercise_piture);
	    		
	    		//
	    		// Get the next picture.
	    		//
	    		Object[] pictureArray = curExercise_.pictureList_.toArray();
	    		if ( (pictureArray == null) || ( pictureLoopCount > pictureArray.length )  ) {
	    			Log.e("Failed Picture", "List test. pictureArray = " + pictureArray + "pictureLoopcount = " + pictureLoopCount);
	    			return;
	    		}
	    		
	    		//
	    		// Change the picture.
	    		//
		        if (pictureLoopCount >= curExercise_.pictureList_.size()) {
		        	pictureLoopCount = 0;
		        }
		        // TODO: error.  Priority queue is not a good way to do this list.
		        //Log.e("updateFlipPicture", "Displaying picture = " + pictureLoopCount + " res id = " + (Integer)pictureArray[pictureLoopCount]);
		        imageView.setImageResource((Integer)pictureArray[pictureLoopCount]);
		        
		        //
		        // Change the picture number displayed.
		        //
		        TextView txView = (TextView)findViewById(R.id.exercise_title);
		        txView.setText(curExercise_.getName() + " (pict " + (pictureLoopCount + 1) + ") ");
		        
		        pictureLoopCount++;       
		    }
    }
    
    //
    // update a counting down clock.
    //
    private void updateCountdownClock()
    {
    	if (!curExercise_.isRested()) {
	   	        clockInfo_.setText("Count Down");
	 		}
	 		else {
	   	        clockInfo_.setText("Rest");
	 		}
			updateClockInView();
    }
    
    // change the clock to show the latest time. 
    private void updateClockInView() {
	    clock_.setText(getClockString(countDown_));
   	 	clockInfo_.invalidate();
	    clock_.invalidate();  
   }

   // Create a clean clock number.
   private String getClockString(int time) {
		String digialString = new String(""+time);
		if (digialString.length() < 2) {
			digialString = "0" + digialString; 
		}
		digialString = "00:" + digialString;
		
		return digialString;
   }
}